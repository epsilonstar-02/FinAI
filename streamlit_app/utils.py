import io
import json
import requests
from fpdf import FPDF


def call_orchestrator(input_text, params):
    """
    Calls the orchestrator API with the given input and parameters.
    
    Args:
        input_text: The user's input text
        params: Dictionary of parameters for the orchestrator
        
    Returns:
        JSON response from the orchestrator or None if the request failed
    """
    try:
        url = f"{params.get('ORCH_URL', '')}/run"
        response = requests.post(
            url,
            json={
                "input": input_text,
                "mode": params.get("mode", "text"),
                "news_limit": params.get("news_limit", 3),
                "retrieve_k": params.get("retrieve_k", 5),
                "include_analysis": params.get("include_analysis", True)
            },
            timeout=30
        )
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error calling orchestrator: {e}")
        return None


def call_stt(file_bytes):
    """
    Calls the Speech-to-Text API with the given audio file bytes.
    
    Args:
        file_bytes: Bytes of the audio file
        
    Returns:
        JSON response containing the transcribed text or an empty dict if failed
    """
    try:
        import os
        url = f"{os.getenv('VOICE_URL')}/stt"
        files = {"file": ("audio.wav", file_bytes, "audio/wav")}
        response = requests.post(url, files=files, timeout=30)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error calling STT service: {e}")
        return {"text": ""}


def call_tts(text, params):
    """
    Calls the Text-to-Speech API with the given text.
    
    Args:
        text: Text to convert to speech
        params: Optional parameters for the TTS service
        
    Returns:
        Audio bytes or None if the request failed
    """
    try:
        import os
        url = f"{os.getenv('VOICE_URL')}/tts"
        response = requests.post(
            url,
            json={"text": text, **params},
            timeout=30
        )
        response.raise_for_status()
        return response.content
    except requests.exceptions.RequestException as e:
        print(f"Error calling TTS service: {e}")
        return None


def generate_pdf(text, filename):
    """
    Generates a PDF document with the given text.
    
    Args:
        text: The text content for the PDF
        filename: The name of the PDF file
        
    Returns:
        PDF document as bytes
    """
    pdf = FPDF()
    pdf.add_page()
    
    # Set up the PDF
    pdf.set_font("Helvetica", size=12)
    pdf.set_auto_page_break(auto=True, margin=15)
    
    # Add title
    pdf.set_font("Helvetica", "B", 16)
    pdf.cell(0, 10, "Financial Intelligence Brief", ln=True, align="C")
    pdf.ln(5)
    
    # Add content
    pdf.set_font("Helvetica", size=11)
    
    # Split text into paragraphs
    paragraphs = text.split("\n\n")
    for paragraph in paragraphs:
        pdf.multi_cell(0, 6, paragraph.strip())
        pdf.ln(3)
    
    # Add footer with date
    import datetime
    pdf.set_font("Helvetica", "I", 8)
    pdf.set_y(-15)
    current_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    pdf.cell(0, 10, f"Generated by FinAI on {current_date}", 0, 0, "C")
    
    # Get the PDF as a string and encode to bytes
    pdf_output = pdf.output(dest="S")
    if isinstance(pdf_output, str):
        return pdf_output.encode("latin1")
    return pdf_output
